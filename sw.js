const CACHE_NAME="v33.3",resourcesToCache=["/","/styles/main.css","/styles/print.css","/scripts/main.js","/scripts/more.js","/fonts/notoSans-Regular.woff2","/fonts/notoSerif-Regular.woff2","/sprites/util.svg","/sprites/player.svg","/medias/images/logo/logo.svg","/offline.html"];async function addResourcesToCache(e){const t=await caches.open(CACHE_NAME);await t.addAll(e)}async function putInCache(e,t){const a=await caches.open(CACHE_NAME);await a.put(e,t)}function notifyServiceUnavailable(){clients.matchAll().then((e=>{e.forEach((e=>{e.postMessage({action:"service-unavailable"})}))}))}async function networkFirst({request:e}){try{const t=await fetch(e);return t&&t.ok&&putInCache(e,t.clone()),t}catch(t){notifyServiceUnavailable();const a=await caches.open(CACHE_NAME),s=await a.match(e);return s||a.match("/offline.html")}}self.addEventListener("install",(e=>{self.skipWaiting(),e.waitUntil(addResourcesToCache(resourcesToCache))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((e=>Promise.all(e.filter((e=>e!==CACHE_NAME)).map((e=>caches.delete(e)))))).then((()=>self.clients.claim())))})),self.addEventListener("fetch",(e=>{"GET"===e.request.method&&e.respondWith(networkFirst({request:e.request}))})),self.addEventListener("message",(e=>{e.data&&"service-unavailable"===e.data.action&&document.documentElement.classList.add("service-unavailable")}));