const CACHE_NAME="v42",MEDIA_CACHE_NAME=`media-${CACHE_NAME}`,OFFLINE_URL="/offline.html",resourcesToCache=["/","/styles/main.css","/styles/print.css","/scripts/main.js","/scripts/more.js","/fonts/notoSans-Regular.woff2","/fonts/notoSerif-Regular.woff2","/sprites/util.svg","/sprites/player.svg","/medias/images/logo/logo.svg",OFFLINE_URL];async function addResourcesToCache(e){try{const t=await caches.open(CACHE_NAME);await t.addAll(e)}catch(e){console.error(`Erreur lors de l'ajout des ressources au cache: ${e}`)}}async function putInCache(e,t,a=CACHE_NAME){try{const s=await caches.open(a);await s.put(e,t)}catch(e){console.error(`Erreur lors de la mise en cache: ${e}`)}}async function cacheFirst({request:e}){try{const t=await caches.open(MEDIA_CACHE_NAME),a=await t.match(e);if(a)return a;const s=await fetch(e);return s&&s.ok&&await putInCache(e,s.clone(),MEDIA_CACHE_NAME),s}catch(t){return console.error(`Erreur dans la stratégie cache first pour ${e.url}: ${t}`),caches.match(OFFLINE_URL)}}async function notifyServiceUnavailable(){try{(await clients.matchAll()).forEach((e=>{e.postMessage({action:"service-unavailable"})}))}catch(e){console.error(`Erreur lors de la notification d'indisponibilité: ${e}`)}}async function networkFirst({request:e}){try{const t=await fetch(e);return t&&t.ok&&await putInCache(e,t.clone()),t}catch(t){console.error(`Erreur dans la stratégie network first pour ${e.url}: ${t}`),await notifyServiceUnavailable();const a=await caches.open(CACHE_NAME),s=await a.match(e);return s||a.match(OFFLINE_URL)}}function isMediaRequest(e){return"image"===e.destination||"video"===e.destination||"audio"===e.destination||/image|video|audio/.test(e.headers.get("accept"))}self.addEventListener("install",(e=>{self.skipWaiting(),e.waitUntil(addResourcesToCache(resourcesToCache))})),self.addEventListener("activate",(e=>{e.waitUntil((async()=>{try{const e=await caches.keys();await Promise.all(e.filter((e=>e!==CACHE_NAME&&e!==MEDIA_CACHE_NAME)).map((e=>caches.delete(e)))),await self.clients.claim()}catch(e){console.error(`Erreur lors de l'activation du service worker: ${e}`)}})())})),self.addEventListener("fetch",(e=>{"GET"===e.request.method&&(isMediaRequest(e.request)?e.respondWith(cacheFirst({request:e.request})):e.respondWith(networkFirst({request:e.request})))})),self.addEventListener("message",(e=>{e.data&&"service-unavailable"===e.data.action&&document.documentElement.classList.add("service-unavailable")}));