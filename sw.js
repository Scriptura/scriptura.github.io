const CACHE_NAME="v47",MEDIA_CACHE_NAME=`media-${CACHE_NAME}`,OFFLINE_URL="/offline.html",resourcesToCache=["/","/styles/main.css","/styles/print.css","/scripts/main.js","/scripts/more.js","/fonts/notoSans-Regular.woff2","/fonts/notoSerif-Regular.woff2","/sprites/util.svg","/sprites/player.svg","/medias/images/logo/logo.svg","/sprites/silos/195v.svg#a","/sprites/various/MonogrammeTULivreDeKellsTEST.svg#a",OFFLINE_URL];async function addResourcesToCache(e){try{const a=await caches.open(CACHE_NAME);await a.addAll(e)}catch(e){console.error(`Erreur lors de l'ajout des ressources au cache: ${e}`)}}async function putInCache(e,a,s=CACHE_NAME){try{const t=await caches.open(s);await t.put(e,a)}catch(e){console.error(`Erreur lors de la mise en cache: ${e}`)}}async function notifyServiceUnavailable(){try{(await clients.matchAll()).forEach((e=>{e.postMessage({action:"service-unavailable"})}))}catch(e){console.error(`Erreur lors de la notification d'indisponibilitÃ©: ${e}`)}}async function networkFirst({request:e}){if(e.url.includes("/app/"))return fetch(e);try{const a=await fetch(e);return a&&a.ok&&await putInCache(e,a.clone()),a}catch(a){await notifyServiceUnavailable();const s=await caches.open(CACHE_NAME),t=await s.match(e);return t||s.match(OFFLINE_URL)}}self.addEventListener("install",(e=>{self.skipWaiting(),e.waitUntil(addResourcesToCache(resourcesToCache))})),self.addEventListener("activate",(e=>{e.waitUntil((async()=>{try{const e=await caches.keys();await Promise.all(e.filter((e=>e!==CACHE_NAME&&e!==MEDIA_CACHE_NAME)).map((e=>caches.delete(e)))),await self.clients.claim()}catch(e){console.error(`Erreur lors de l'activation du service worker: ${e}`)}})())})),self.addEventListener("fetch",(e=>{"GET"===e.request.method&&e.respondWith(networkFirst({request:e.request}))})),self.addEventListener("message",(e=>{e.data&&"service-unavailable"===e.data.action&&document.documentElement.classList.add("service-unavailable")}));