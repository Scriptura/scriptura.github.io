.grid2.gap.gap-bottom
  .grid.gap
    p
      code progress.progress
    progress.progress(max='100' value='0')
    p
      code (max='100' value='50')
    progress.progress(max='100' value='50')
    p
      code (style='--color:#4e667a')
    progress.progress(max='100' value='50' style='--color:#4e667a')
    p
      code .scale(style='--scale:150%')
    progress.progress.scale(max='100' value='50' style='--scale:150%')
    h2 Test
    progress.progress#progress-test-target(max='100' value='0')
    div
      button#progress-test-cmd.button(type='button') Test de 0 à 100%
  //-figure.center
    svg.size.reverse.decorative-svg(role='img' focusable='false')
      use(href='/sprites/silos/126r-d1.svg#1')
  figure.center
    svg.size.decorative-svg(role='img' focusable='false')
      use(href='/sprites/silos/245v-d1.svg#1')
.grid2.gap
  .message-highlight
    svg.icon(role='img' focusable='false')
      use(href='/sprites/util.svg#info')
    div
      p L'élément HTML natif est désormais utilisé, notre solution précédente était constituée d'une div pilotée par JavaScript pour simuler la progression.
script.
  const progressBarTest = (() => {
    const button = document.querySelector('#progress-test-cmd'),
          progress = document.querySelector('#progress-test-target')

    button && button.addEventListener('click', () => {
      setTimeout(() => out(), 5000)
      button.disabled = true
      let value = 0 //progress.value
      setInterval(() => frame(), 20)
      function frame() {
        if (value <= progress.max) progress.value = value++
        if (value >= progress.max) return
        console.log(progress.value)
      }
      function out() {
        progress.value = 0
        button.disabled = false

      }
    })
  })()
