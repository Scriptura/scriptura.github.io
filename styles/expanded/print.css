@charset "utf-8"; /* Les guillemets doubles évitents une erreur au validateur du W3C. @see https:/* validator.w3.org/ */ /* @note Doublage des variables Sass par les variables CSS natives impliquées dans les médias queries. @todo en attendant un support total d'usage pour les variables natives. */ /* @subsection Breakpoints */ /* @bugfix Nécessité de préciser deux chiffres après la virgule pour éviter un arrondissement de la valeur par les navigateurs. */ /* @note L'idée étant d'avoir une précision au-délà du pixel, nous évitant ainsi de devoir utiliser les opérateur logiques CSS4 de type inclusifs (exemple : `<=`). @todo En test...*/ /* @note La fonction calc() n'est pas implémentée pour les media queries, ou alors partiellement (unité de même type). @see https://stackoverflow.com/questions/23667208 @todo À réévaluer dans le temps... */ /* @note Attention, il s'agit d'une valeur empirique qui tente d'anticiper la taille minimale nécessaire au menu en desktop. @todo À remplacer par une solution plus fiable à l'avenir, mais qui ne serait peut-être alors pas mobile first et pourrait poser des problèmes de reflow... */ :root {
  --size-nav: 90.01em; /* @note Variable CSS utilisée en JavaScript. */
  --gap: 1em; /* Gouttière, largeur entre deux modules */
  --wrap: 92em; /* calc(90em + var(--gap) * 2)*/ /* Largeur maximale du contenu (+ prise en compte du padding interne) */

  /* @subsection  Web fonts */
  /* @note Le chargement des polices via @font-face est fortement recommandé pour ne pas dépendre de l'environnement de l'utilisateur. Ce qui permet d'avoir la maitrise du design du site. Les CDNs sont un mal à proscrire également. */
  --font-list1: 'Noto Sans', sans-serif;
  --font-list2: 'Noto Serif', serif;

  /* @subsection Color themes */

  /* Dark theme */
  --color-scheme: dark;
  --colorG13: hsl(0, 0%, 13%);
  --colorG15: hsl(0, 0%, 15%);
  --colorG18: hsl(0, 0%, 18%);
  --colorG22: hsl(0, 0%, 22%);          /* gris de référence */
  --colorG27: hsl(0, 0%, 27%);
  --colorG33: hsl(0, 0%, 33%);
  --colorG38: hsl(0, 0%, 38%);
  --colorG45: hsl(0, 0%, 45%);
  --colorG60: hsl(0, 0%, 60%);
  --colorW: hsl(0, 0%, 100%);           /* blanc de référence */
  --colorB: hsl(0, 0%, 0%);             /* noir de référence */
  --colorT: hsl(35, 45%, 84%);          /* couleur primaire du texte */
  --colorT2: hsl(34, 44%, 69%);         /* couleur secondaire du texte */
  --color1: var(--colorG22);            /* couleur de fond */
  --color2: hsl(9, 100%, 64%);          /* couleur dominante 2 (tomato) */
  --color3: hsl(12, 63%, 49%);          /* couleur secondaire */
  --color4: hsl(96, 41%, 29%);          /* couleur secondaire */
  --color5: hsl(39, 100%, 50%);         /* couleur secondaire */
  --color6: hsl(207, 22%, 39%);         /* couleur secondaire */
  --colorA003: hsla(0, 0%, 100%, 0.03);
  --colorA005: hsla(0, 0%, 100%, 0.05);
  --colorA1: hsla(0, 0%, 100%, 0.1);
  --colorA15: hsla(0, 0%, 100%, 0.15);
  --colorA2: hsla(0, 0%, 100%, 0.2);
  --colorA3: hsla(0, 0%, 100%, 0.3);
  --colorA7: hsla(0, 0%, 100%, 0.7);
  --colorA5: hsla(0, 0%, 100%, 0.5);
  --colorAB0: hsla(0, 0%, 0%, 0);
  --colorAB1: hsla(0, 0%, 0%, 0.1);
  --colorAB2: hsla(0, 0%, 0%, 0.2);
  --colorAB25: hsla(0, 0%, 0%, 0.25);
  --colorAB005: hsla(0, 0%, 0%, 0.05);
  --colorAB3: hsla(0, 0%, 0%, 0.3);
  --colorAB4: hsla(0, 0%, 0%, 0.4);
  --colorAB5: hsla(0, 0%, 0%, 0.5);
  --colorAB7: hsla(0, 0%, 0%, 0.7);
  --colorAB8: hsla(0, 0%, 0%, 0.8);
  --colorAS2: hsl(9, 100%, 64%, 0.5);   /* dérivée de `--color2` */
  --colorAS22: hsla(0, 100%, 50%, 0.3);
  --colorS4: hsl(96, 41%, 53%);
  --colorS5: hsla(30, 31%, 54%);
  --colorS52: hsl(39, 100%, 35%);

  /*
  /* Light theme
  --color-scheme: light;
  --colorG13: hsl(10, 50%, 13%);
  --colorG15: hsl(10, 50%, 15%);
  --colorG18: hsl(10, 50%, 18%);
  --colorG22: hsl(10, 50%, 22%);          /* gris de référence
  --colorG27: hsl(55, 100%, 93%);
  --colorG33: hsl(10, 50%, 33%);
  --colorG38: hsl(10, 50%, 38%);
  --colorG45: hsl(10, 50%, 45%);
  --colorG60: hsl(10, 50%, 60%);
  --colorW: hsl(0, 0%, 100%);           /* blanc de référence
  --colorB: hsl(0, 0%, 0%);             /* noir de référence
  --colorT: hsl(9, 63%, 16%);           /* couleur primaire du texte
  --colorT2: hsl(34, 20%, 45%);         /* couleur secondaire du texte
  --colorW: hsl(0, 0%, 100%);           /* blanc de référence
  --colorB: hsl(0, 0%, 0%);             /* noir de référence
  --color1: hsl(55, 100%, 95%);         /* couleur de fond
  --color2: hsl(9, 100%, 64%);          /* couleur dominante 2 (tomato)
  --color3: hsl(12, 63%, 49%);          /* couleur secondaire
  --color4: hsl(154, 69%, 42%);         /* couleur secondaire
  --color5: hsl(60, 63%, 67%);          /* couleur secondaire
  --color6: hsl(207, 47%, 68%);         /* couleur secondaire
  --colorA003: hsla(0, 0%, 100%, 0.03);
  --colorA005: hsla(0, 0%, 100%, 0.05);
  --colorA1: hsla(0, 0%, 100%, 0.1);
  --colorA15: hsla(0, 0%, 100%, 0.15);
  --colorA2: hsla(0, 0%, 100%, 0.2);
  --colorA3: hsla(0, 0%, 100%, 0.3);
  --colorA7: hsla(0, 0%, 100%, 0.7);
  --colorA5: hsla(0, 0%, 100%, 0.5);
  --colorAB0: hsla(0, 0%, 0%, 0);
  --colorAB1: hsla(0, 0%, 0%, 0.1);
  --colorAB2: hsla(0, 0%, 0%, 0.2);
  --colorAB25: hsla(0, 0%, 0%, 0.25);
  --colorAB005: hsla(0, 0%, 0%, 0.05);
  --colorAB3: hsla(0, 0%, 0%, 0.3);
  --colorAB4: hsla(0, 0%, 0%, 0.4);
  --colorAB5: hsla(0, 0%, 0%, 0.5);
  --colorAB7: hsla(0, 0%, 0%, 0.7);
  --colorAB8: hsla(0, 0%, 0%, 0.8);
  --colorAS2: hsl(9, 100%, 64%, 0.5);     /* dérivée de `--color2`
  --colorAS22: hsla(0, 100%, 50%, 0.3);
  --colorS4: hsl(96, 41%, 53%);
  --colorS5: hsla(30, 31%, 54%);
  --colorS52: hsl(39, 100%, 35%);
  */

  /* @subsection Borders */
  --border1: 0.2em solid transparent;

  /* @subsection Shadows */
  /* @note Seules les ombres de référence - et donc redontantes - sont placées ici, les autres sont directement intégrées à leur propriété. */
  --shadow1: 0.5rem 0.5rem 2rem hsla(0, 0%, 0%, 0.15);
  --shadow2: inset 0 0 0.1em hsla(0, 0%, 0%, 0.3),
    0 0.5rem 2rem hsla(0, 0%, 0%, 0.3); /* ombres interieures en em, ombres exterieures en rem */
  --shadow3: 0 0 1.5rem hsla(0, 0%, 0%, 0.2);
  --shadow4: 0 1.5rem 2rem hsla(0, 0%, 0%, 0.4);
  --shadow5: 0 0 2rem hsla(0, 0%, 0%, 0.2);
  --shadow6: 0.5rem 0.5rem 2rem hsla(0, 0%, 0%, 0.1);
  --shadow7: 0.5rem 0.5rem 2rem hsla(0, 0%, 0%, 0.25);
  --shadow8: 0 1rem 1rem hsla(0, 0%, 0%, 0.1); /* .accordion
  //--shadow9: 0 0 0 1000em #222; /* Ombre spécifique pour remplacer éventuellement le background-color d'un élément parent. */

  /* @subsection Rounds */
  --r1: 0.3em; /* Boites */
  --r2: 0.3em; /* Éléments internes */
  --r3: .2em; /* Éléments de liste */
} @font-face {
  font-family: 'Noto Sans';
  src: url('../fonts/notoSans-Regular.woff2') format('woff2'),
       url('../fonts/notoSans-Regular.woff') format('woff');
  font-weight: normal;
  font-style: normal;
  /* @see https://css-tricks.com/almanac/properties/f/font-display/ */
  font-display: swap;
} @font-face {
  font-family: 'Noto Serif';
  src: url('../fonts/notoSerif-Regular.woff2') format('woff2'),
       url('../fonts/notoSerif-Regular.woff') format('woff');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
} /**
 * @note Les ressets CSS sont inspiré de Bootstrap Reboot et Normalize CSS 8.0.1 puis étendu par nos soins.
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/scss/_reboot.scss
 * @see https://github.com/necolas/normalize.css
 * @see https://github.com/alsacreations/KNACSS/blob/v8/sass/base/_reset.scss
 * @see https://github.com/alsacreations/KNACSS/blob/master/sass/_vendor/_reboot.scss
 */ :root {
  color-scheme: var(--color-scheme);
  /* Ability to the value of the root font sizes, affecting the value of `rem`. Null by default, thus nothing is generated. */
  /*font-size: 1rem; */
} *,
::before,
::after {
  box-sizing: border-box;
} html {
  /* @bugfix Prevent adjustments of font size after orientation changes @affected iOS. */
  -webkit-text-size-adjust: 100%;
  /* -webkit-tap-highlight-color: transparent */
  /* Change the default tap highlight to be completely transparent. @affected iOS. */
  color: var(--colorT);
  background-color: var(--color1);
  font-family: var(--font-list1);
  /**
   * Sur les verrous CSS @see https://hugogiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/
   * Outil en ligne @see https://modern-fluid-typography.vercel.app
   * Le site étant entièrement scalable dans son ensemble, il n'y a pas d'utilisation de vérrou CSS en raison de ses effets de bords sur certains éléments (typographie, pre > code, ribbons...).
  /* font-size: clamp(1em, .7vw + .1em, 1.125em); */
  /* @bugfix Correct the line height @affected All browsers. */
  line-height: 1.5;
  scroll-behavior: smooth;

  @media (prefers-reduced-motion: reduce) {
    /* Désactivation du défilement fluide si réduction des animations dans les préférences utilisateur du navigateur @see https://developer.mozilla.org/fr/docs/Web/CSS/scroll-behavior#Accessibilité */
    scroll-behavior: auto;
  }
} ::selection {
  color: var(--colorW);
  background-color: var(--colorAS2);
} a {
  color: var(--colorT2);
  text-underline-offset: 10%;

  &:where(:focus, :hover, :active) {
    color: var(--colorW);
    text-decoration: none;
    outline: none;
  }
} p {
  margin-block: 0.75em;
} hr {
  /* @bugfix Show the overflow @affected Edge and IE. */
  overflow: visible;
  /* @bugfix Add the correct box sizing @affected Firefox. */
  box-sizing: content-box;
  /* @bugfix Add the correct box sizing @affected Firefox @note Toujours définir une valeur. */
  height: 0.5em;
  margin: 2.5em 0;
  /* @bugfix Reset gray color. @affected Firefox. */
  color: transparent;
  background-image: repeating-linear-gradient(
    -45deg,
    transparent 0 5px,
    var(--colorA1) 5px 10px
  );
  border: none;
} h1,
h2,
h3,
h4,
h5,
h6,
.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
  font-family: var(--font-list2);
  text-wrap: balance;
} :where(.h2, .h3, .h4, .h5, .h6) {
  /* @note Important à redéfinir pour les classes aposées sur d'autres éléments que des titres, comme <legend> ou <label> par exemple. */
  margin-block: 0.83em;
  fieldset > legend& {
    /* @bugfix @affected Chrome @note Si pas de correctif la marge passe en dessous du fieldset conteneur. */
    padding-block-start: 0.83em;
  }
} h1,
.h1 {
  margin-block: clamp(0.83em, 5vw, 0.67em); /* 0.83em */
  font-size: clamp(2em, 5vw, 2.5em); /* 2.5em */
} h2,
.h2 {
  font-size: 2em;
} h3,
.h3 {
  font-size: 1.75em;
} h4,
.h4 {
  font-size: 1.5em;
} h5,
.h5 {
  font-size: 1.25em;
} h6,
.h6 {
  font-size: 1em;
} pre {
  margin: 0;
  /* @bugfix Correct the inheritance and scaling of font size @affected All browsers. */
  font-family: monospace, monospace;
  /* @bugfix Correct the odd `em` font sizing @affected All browsers. */
  font-size: 1em;
  white-space: pre-wrap;
  /* word-break: keep-all; */
} abbr[title] {
  /* @bugfix Add the correct text decoration @affected Chrome, Edge, IE, Opera, and Safari. */
  text-decoration: underline;
  /* @bugfix Idem */
  text-decoration: underline dotted;
} b,
strong {
  /* @bugfix Add the correct font weight @affected Chrome, Edge, and Safari. */
  font-weight: bold;
} i,
em {
  font-style: italic;
} blockquote {
  margin: 0;
} q {
  /* Harmonisation des citations. */
  quotes: '\201C''\201D''\2018''\2019';
} mark {
  color: currentcolor;
  background-color: var(--color3); /* --color2 */
} small {
  /* @bugfix Add the correct font size @affected All browsers. */
  font-size: 80%;
} sub,
sup {
  /* @bugfix Prevent `sub` and `sup` elements from affecting the line height @affected All browsers. */
  position: relative;
  line-height: 0;
  font-size: 75%;
  vertical-align: baseline;
} sub {
  /* @bugfix Prevent `sub` and `sup` elements from affecting the line height @affected All browsers. */
  bottom: -0.25em;
} sup {
  /* @bugfix Prevent `sub` and `sup` elements from affecting the line height @affected All browsers. */
  top: -0.5em;
} ins {
  text-underline-offset: 10%;
} details {
  /* @note Tentative de reproduire avec les marges l'espacement des items d'une liste. */
  display: block;

  &:first-child {
    margin-block-start: 0.75em;
  }

  &:last-child {
    margin-block-end: 0.75em;
  }

  :not(.accordion) > & details {
    margin: 0 0 0 2em;

    &:first-child {
      margin-block-start: 0;
    }

    &:last-child {
      margin-block-end: 0;
    }
  }
} summary {
  /* @bugfix Add the correct display @affected All browsers. */
  display: list-item;
  list-style: none;
  cursor: pointer;

  &:focus-visible,
  &:hover {
    outline: none;
    color: var(--colorW);
    text-decoration: underline;

    &::before {
      color: var(--colorW);
    }
  }

  &::before {
    /* @note Nous n'utilisons pas ::marker car le rendu diffère sur mobiles, ceci nous permet aussi de personnaliser la puce. @affected Chrome mobile. */
    content: '➤';
    display: inline-block;
    margin-inline-end: 0.5em;
    color: var(--color2);
  }

  details[open] > &::before {
    transform: rotate(90deg);
  }
} /*
template {
  display: none; /* @bugfix Add the correct display @affected IE 10+.
}

[hidden] {
  display: none; /* @bugfix Add the correct display @affected IE 10.
}
*/ iframe {
  overflow: hidden;
  width: 100%;
  height: 100%;
  border: none;
} ruby {
  display: grid;
  gap: 0.5em;

  & * {
    margin: auto;
  }
} ::marker {
  color: var(--color2);
} .main-heading {
  /* @note Alias de overflow-wrap @see https://developer.mozilla.org/fr/docs/Web/CSS/overflow-wrap */
  word-wrap: break-word;
  text-shadow: 0.2em 0.2em 0.2em var(--colorAB3);
} .main-heading span {
  color: var(--color2);
} hr[data-hr],
.decorative-hr hr {
  display: block;
  /* clear: both: */
  width: 100%;
  height: 2em;
  margin: 2em 0;
  line-height: 1;
  /* letter-spacing: 0.5em; */
  background-image: none;

  &::after {
    content: attr(data-hr);
    display: block;
    width: 100%;
    height: 100%;
    font-size: 2em;
    text-align: center;
    color: var(--colorA2);
  }
} .decorative-hr hr::after {
  content: '✻ ✻ ✻';
} .blockquote blockquote {
  position: relative;
  margin: 0;
  padding-inline-start: 2em;
  background: repeating-linear-gradient(-45deg, transparent 0 5px, var(--colorA1) 5px 10px) no-repeat;
  background-size: 0.5em 100%;

  &::before,
  &::after {
    position: absolute;
    left: -0.1em;
    line-height: 0.5;
    font-size: 3rem;
    color: var(--color2);
    font-family: var(--font-list2);
  }

  &::before {
    content: '\00AB'; /* '\201D' */
    top: -0.1em;
  }

  &::after {
    content: '\00BB'; /* '\201C' */
    bottom: 0;
  }

  & footer {
    margin-block: 0.75em;
    /* text-align: right; */
  }

  & footer::before {
    content: '\2014 \00A0';
  }

  & footer::after {
    content: '.';
  }
} /* @note Grec ancien (grc), grec moderne ('el'). */ :lang(he) {
  direction: rtl;
  /* font-family: $font-list; */
} .verse {
  color: var(--color2);
} .links p a {
  &:not([href^='#'])::after {
    /* @note Liens internes, sauf pour les ancres. */
    content: ' ↩';
  }
  /* Liens externes */
  &[href*='//']::after
  {
    content: ' ↗';
  }
} .justify {
  hyphens: auto;

  @media (width > 35.01em) {
    text-align: justify;
  }
} /* @import 'layout'; */ /* @note Utiliser .grid2 pour avoir deux colonnes, etc., au-delà de .grid4 utiliser .grid-auto (qui par défaut aura 5 colonnes max pour la largeur prévue de notre site). */ /* @note Avec `minmax` la grille ne sera pas tributaire de son contenu en responsive @see https://css-tricks.com/equal-width-columns-in-css-grid-are-kinda-weird/ */ :has(> [class^='grid']),
.parent-grid {
  /* @note ".parent-grid" est un fallback pour le sélecteur :has(), ajout de la classe via JS. */
  container: grid/inline-size;
  width: 100%; /* @note Important si le conteneur n'a pas de largeur définie par défaut. */
} [class^='grid'] {
  display: grid;
  grid-auto-flow: dense;
  grid-template-columns: repeat(var(--n, 1), minmax(0, 1fr));

  &.row-defines {
    /* @note Permet aux spans de la propriété grid-row de se caler sur les lignes. Intéressant mais pas souhaitable d'emblée en production, d'où cette classe. */
    grid-auto-rows: minmax(0, 1fr);
  }

  &.gap {
    gap: var(--gap);
  }

  &.gap-block {
    /* @note padding et non margin, car ne doit pas pouvoir fusionner avec les marges de l'élément suivant. */
    padding-block: var(--gap);
  }

  &.gap-top {
    /* @note Idem. */
    padding-block-start: var(--gap);
  }

  &.gap-bottom {
    /* @note Idem. */
    padding-block-end: var(--gap);
  }

  &.gap-vertical {
    gap: 0 var(--gap);
  }
  /*
  &.masonry {
    grid-template-rows: masonry; /* @note Implémentation future en CSS @todo À surveiller.
  }
  */
} .grid-auto,
.grid-auto-min {
  /* @note Ne pas définir la variable au-dessus de sa valeur par défaut afin d'éviter des dépassement sur les écrans de petites définitions. Préférer alors les grilles prédéfinies. @todo min() en test pour éviter justement ce problème. */
  grid-template-columns: repeat(auto-fit, minmax(min(var(--size-grid, 20em), 100%), 1fr));
} .grid-auto-min {
  /* @note Valeur réduite évitant de définir trop fréquement la variable de .grid-auto via du style en ligne. */
  --size-grid: 10em;
} @media (width < 35.01em) {
  .xs-grid-auto {
    /* @todo Valeur arbitraire à redéfinir. */
    grid-template-columns: repeat(auto-fit, minmax(var(--xs-size-column, 11em), 1fr));
  }
} @container grid (35.01em < width) {
  .grid2,
  .grid3,
  .grid4 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
} @container grid (50.01em < width) {
  .grid3,
  .grid4 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
} @container grid (70.01em < width) {
  .grid4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
} @container grid (35.01em < width) {
  /* @todo En attendant avec impatience le support de "grid-column: span minmax(1, 2)" */
  .c2,
  .c3,
  .c4 {
    grid-column: span 2;
  }

  .xs-c1 {
    grid-column: span 1;
  }

  .xs-c2 {
    grid-column: span 2;
  }
} @container grid (50.01em < width) {
  .c3,
  .c4 {
    grid-column: span 3;
  }
} @container grid (70.01em < width) {
  .c4 {
    grid-column: span 4;
  }
} @container grid (35.01em < width < 50.01em) {
  .s-c1 {
    grid-column: span 1;
  }

  .s-c2 {
    grid-column: span 2;
  }
} @container grid (50.01em < width < 70.01em) {
  .m-c1 {
    grid-column: span 1;
  }

  .m-c2 {
    grid-column: span 2;
  }
} .r2 {
  grid-row: span 2;
} .r3 {
  grid-row: span 3;
} .r4 {
  grid-row: span 4;
} @container grid (35.01em < width) {
  :root .xs-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
} @container grid (35.01em < width < 50.01em) {
  :root .s-grid1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  :root .s-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
} @container grid (50.01em < width < 70.01em) {
  :root .m-grid1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  :root .m-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  :root .m-grid3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  :root .m-grid4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
} @container grid (70.01em < width < 92.01em) {
  :root .l-grid1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  :root .l-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  :root .l-grid3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  :root .l-grid4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
} @container grid (92.01em < width) {
  :root .xl-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
} .flex {
  display: flex;
  flex-wrap: wrap;
  align-items: center;

  &.gap {
    gap: var(--gap);
  }

  &.gap-top {
    margin-block-start: var(--gap);
  }

  &.gap-bottom {
    margin-block-end: var(--gap);
  }

  & .item-push {
    margin-inline-start: auto;
  }
} .order {
  /* @note Valeur négative car l'utilisation de cette classe est souvent utilisée pour une monté des éléments frères plutôt qu'une descente. */
  order: var(--o, -1);
} @container grid (width < 35.01em) {
  .xs-order {
    order: var(--o, -1);
  }
} @container grid (35.01em < width < 50.01em) {
  .s-order {
    order: var(--o, -1);
  }
} @container grid (50.01em < width < 70.01em) {
  .m-order {
    order: var(--o, -1);
  }
} /* @note Mémento de nos (presques) équivalences grid/flex codées ultérieurement : */ /* with Grid layout: */ /*
.summary {
  display: grid;
  gap: var(--gap);

  @media (min-width: $sizeXS) {
    grid-template-columns: repeat(2, 1fr);
  }

  @media (min-width: $sizeS) {
    grid-template-columns: repeat(3, 1fr);
  }

  @media (min-width: $sizeL) {
    grid-template-columns: repeat(4, 1fr);
  }
}
*/ /* with flexbox: */ /*
.summary {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gap);

  & > * {
    flex: 1 0 100%; /* = [flex-grow flex-shrink flex-basis]

    @media (min-width: $sizeXS) {
      flex-basis: calc(50% - var(--gap));
    }

    @media (min-width: $sizeS) {
      flex-basis: calc(33% - var(--gap));
    }

    @media (min-width: $sizeL) {
      flex-basis: calc(25% - var(--gap));
    }
  }
}
*/ /* @bug @affected Chrome @note Nombreux bugs : éléments html ou effets d'ombre tronqués s'ils dépassent des colonnes, drop-shadow utilisé sur des éléments internes aux colonnes créé des artefacts. */ [class^='column'] {
  column-gap: 0;
  position: relative;

  & > * {
    display: inline-block;
    width: 100%;
    /* @note Évite aux items enfants de column d'être éventuellement coupés en deux. @see https://stackoverflow.com/questions/7785374 */
    break-inside: avoid-column;
    /* @note Alias de overflow-wrap @see https://developer.mozilla.org/fr/docs/Web/CSS/overflow-wrap */
    word-wrap: break-word;
  }

  &.gap {
    column-gap: var(--gap);
    /* @note À l'inverse de grid layout, le module columns a besoin des marges pour bien s'implémenter. */
    margin-block-end: calc(var(--gap)*-1);

    & > * {
      margin-block-end: var(--gap);
    }
  }

  &.gap-top {
    margin-block-start: var(--gap);
  }

  &.gap-bottom {
    margin-block-end: 0;
  }

  &.gap-vertical {
    gap: 0 var(--gap);
    /* column-gap: var(--gap); */
  }
} @media (width < 35.01em) {
  .sizeXS-column2 {
    column-count: 2;
  }
} @media (width > 35.01em) {
  .column2,
  .column3,
  .column4,
  .s-column2 {
    column-count: 2;
  }

  .column5,
  .column6 {
    column-count: 3;
  }
} @media (width > 50.01em) {
  .column3,
  .column4 {
    column-count: 3;
  }

  .column5,
  .column6 {
    column-count: 4;
  }

  .m-column2 {
    column-count: 2;
  }
} @media (width > 92.01em) {
  .column4 {
    column-count: 4;
  }

  .column5 {
    column-count: 5;
  }

  .column6 {
    column-count: 6;
  }

  .l-column3 {
    column-count: 3;
  }
} /* @import 'navigation'; */ /* @import 'breadcrumb'; */ /* @import 'alert'; */ ul,
ol {
  padding-inline-start: var(--list-start, 2.5em);
} ul :where(ul, ol) {
  padding-inline-start: 2.5em;
} ul {
  list-style-type: square;
} ol ol {
  list-style-type: lower-latin;

  & ol {
    list-style-type: lower-greek;
  }
} .list-gap {
  display: grid;
  gap: 0.75em; /* @note Écart calé sur les paragraphes. */
} .list-stripe,
.list-stripe-links {
  /* @note Ne pas utiliser : ne travaille pas de concert avec la classe `.grid`. */
  /* all: unset; */
  margin: 0;
  padding-inline-start: 0;

  & li {
    display: block;
    border-radius: var(--r2);
  }

  & > * {
    padding: 0.5em 1em;
    background-color: var(--colorG27);
    box-shadow: var(--shadow6);
  }
} .list-stripe-links {
  & a {
    display: block;
    color: var(--colorT);
    text-decoration: none;
  }

  & li:focus-within,
  & li:hover {
    background-color: var(--color2);
    outline: none;
    animation: anim-list 0.05s ease-in-out;
  }
} .list-straight,
.list-rounded {
  margin: 0;
  padding-inline-start: 0;

  & li {
    display: grid;
    grid-template-columns: 3em minmax(0, 1fr);

    &:focus-within,
    &:hover {
      animation: anim-list 0.05s ease-in-out;
    }

    &:where(:focus-within, :hover, :active) svg,
    &:focus-within::before,
    &:hover::before,
    &:active::before {
      color: var(--colorW);
      background-color: var(--color5);
    }
  }

  & li::before,
  & svg,
  & a {
    box-shadow: var(--shadow6);
    transition: color, background-color 0.3s ease-in-out;
  }

  & li::before,
  & svg {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--colorT);
    background-color: var(--color2);
  }

  & a {
    display: flex;
    align-items: center;
    width: 100%;
    min-height: 2.5em;
    padding: 0.5em 1em;
    background-color: var(--colorG27);
    text-decoration: none;

    &:where(:focus, :hover, :active) {
      /* color: var(--colorW); */
      background-color: var(--color2);
      /* text-decoration: none; */
    }
  }
} .list-straight {
  & li {
    box-shadow: var(--shadow6);
  }
  & li::before,
  & svg {
    width: 3em;
    border-radius: var(--r3) 0 0 var(--r3);
    clip-path: polygon(
      0% 0%,
      calc(100% - 1em) 0,
      100% 50%,
      calc(100% - 1em) 100%,
      0% 100%
    );
  }

  & li::before {
    padding-inline-end: 0.7em;
  }

  & svg {
    min-height: 100%;
    /* @note Détermine en creux la taille de l'icône. */
    padding-inline: 0.7em 1.1em;
  }

  & a {
    position: relative;
    right: 0.5em;
    width: calc(100% + 0.5em);
    padding-inline-start: 1.5em;
    border-radius: 0 var(--r3) var(--r3) 0;
    clip-path: polygon(100% 0, 100% 100%, 0% 100%, 1em 50%, 0% 0%);
  }
} .list-rounded {
  & li:focus-within svg,
  & li:hover svg,
  & li:focus-within::before,
  & li:hover::before {
    transform: rotate(360deg);
  }

  & li::before,
  & svg {
    width: 2.5em;
    height: 2.5em;
    /* @note Pour centrer la "puce" si contenu de l'item trop important. @todo Résultat visuel à évaluer. */
    margin: auto 0;
    transition: transform 0.3s ease-in-out;
  }

  & li::before {
    border-radius: 50%;
  }

  & svg {
    position: relative;
    padding-inline: 0.7em;
    clip-path: circle(50%);
  }

  & a {
    border-radius: 1.25em;
  }
} ol:where(.list-straight, .list-rounded) li {
  counter-increment: li;

  &::before {
    content: counter(li);
  }
} [class^='grid'][class*='list-'] {
  gap: var(--gap);
} [start] > .chorus {
  /* @note Pour les refrains. Pour la cohérence de la liste les numéros doivent être définis avec l'attribut `start="0" afin de commencer par "1".` */
  list-style-type: 'R. ';
} @keyframes anim-list {
  50% {
    transform: scale(1.03) translateZ(0);
  }
} svg {
  max-width: 100%;
  fill: currentcolor;
} .decorative-svg {
  fill: var(--colorT2);
  filter: drop-shadow(0.2em 0.2em 0.2em var(--colorAB3));
} /* @note Éviter un espace de nom trop générique qui pourrait engendrer des effets de bord. */ .icon,
.icon-inline {
  display: inline-block;
  vertical-align: sub;
  height: 1.2em;
  aspect-ratio: 1;
} .icon-inline {
  margin-inline-end: 0.5em;
} img {
  /* @note Évite un décalage possible de l'élément suivant. */
  vertical-align: middle;
  /* @bugfix @todo Depuis l'introduction des attributs 'srcset' et 'sizes' la largeur ne doit plus dépendre de l'image par défaut. */
  /* width: 100%; */
  max-width: 100%;
  height: auto;
  border-style: none;
  /* @note N'a pas pour vocation ici de "protéger" l'image, mais d'éviter la surbrillance non attendue suite à une sélection involontaire. */
  user-select: none;

  &:fullscreen {
    object-fit: contain;
  }
} figure {
  /* @bugfix @affected All browers. */
  margin: 0;
} [class*='figure-image'] {
  width: 100%;
  padding: 0.5em;
  color: var(--colorT);
  background-color: var(--colorG27);
  box-shadow: var(--shadow5);
  user-select: none;

  & figcaption {
    padding-block-start: 0.5em;
    text-align: center;
  }
} [class*='-thumbnail'] {
  /* @note Important à appliquer pour le responsive si le width n'est pas définit préalablement. */
  width: 100%;
  max-width: calc(50% - var(--gap)/2);

  @media (width < 50.01em) {
      max-width: 20em;
      margin-inline: auto;
  }
} @media (width > 50.01em) {
  [class*='-alignleft'] {
    float: left;
    margin-inline-end: var(--gap);
  }

  [class*='-alignright'] {
    float: right;
    margin-inline-start: var(--gap);
  }

  :where([class*='-alignleft'], [class*='-alignright']) ~ :where(h2, h3, hr, aside) {
    clear: both;
  }
} @media (scripting: enabled) {
  [class*='-focus'] {
    position: relative;
    /* @note Évite un conflit avec d'autres éléments HTML positionnés en relatifs dans la mise en page, tel que les ancres line-mark. */
    z-index: 1;
    cursor: zoom-in;
    transition: 0.15s transform;
    &:where(:focus-within, :hover) {
      box-shadow: 0.5em 0.5em 2em var(--colorAB3);
      transform: scale(1.01);
    }
  }
} @media (hover: hover) and (pointer: fine) {
  [class*='-focus']:focus-within {
    background-color: var(--color5);

    & button {
      color: var(--color5);
    }
  }
} [class*='-focus'] button,
.picture-area button {
  all: unset;
  position: absolute;
  z-index: 1;
  /* @affected Firefox @note La propriété !important est obligatoire pour que ce navigateur prenne en compte la règle. */
  outline: none !important;
  cursor: zoom-in;

  & svg {
    width: 100%;
    height: 100%;
  }
} [class*='-focus'] button {
  top: 1em;
  right: 1em;
  width: 1.2em;
  height: 1.2em;
  color: var(--colorG60);
} .picture-area {
  position: fixed;
  /* @note Doit passer au dessus de tout autre élément, notamment le scroll top. */
  z-index: 4001;
  inset: 0;
  display: grid;
  align-items: center;
  justify-content: center;
  background-color: var(--colorG13);
  cursor: zoom-out;

  & img {
    all: unset;
    max-width: 100%;
    max-height: 100vh;
    /* @note Pour les images dotées d'un canal alpha. */
    background-color: var(--colorB);
  }

  & button {
    bottom: 1em;
    right: 1em;
    width: 2em;
    height: 2em;
    color: var(--colorG60);
    cursor: zoom-out;

    /*
    &:where(:focus-within, :hover, :active) {
      color: var(--color5);
    }
    */

    /*
    &.fullscreen-button {
      transform: translateX(-3em);
      cursor: zoom-in;
    }
    */
  }
} .freeze {
  overflow: clip;
} .mosaic {
  & figure {
    padding: 0.2em;
  }

  & img {
    aspect-ratio: 1;
    object-fit: cover;
  }

  & button {
    top: 0.5em;
    right: 0.5em;
    width: 1em;
    height: 1em;
  }
} /* @import 'mediaPlayer'; */ /* @import 'map'; */ /* @import 'card'; */ code,
kbd,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
  word-break: break-all;
  color: var(--colorT2);
  border-radius: 0.3em;
} :not(pre) > code {
  padding: 0.2em;
  background-color: var(--colorG15);
} .pre {
  overflow: auto;
  position: relative;
  min-height: 3em;
  padding: 1em;
  background-color: var(--colorG13);
  border-radius: 0.3em;
  box-shadow: 0 0 2rem var(--colorAB3);
  line-height: 1.25em;

  &:where(:focus, :active) {
    outline: 0.1em solid var(--color2);
  }

  & code {
    white-space: pre;
    color: var(--colorT);
    transition: color 0.5s ease-in-out;

    &:focus-within {
      color: var(--colorW);
    }

    &:empty::before {
      content: '> ';
    }

    &:empty::after {
      content: '_';
      animation: anim-blink-empty 1s steps(2, start) infinite;
    }
  }

  & div {
    position: absolute;
    top: 1em;
    right: 1em;
    display: flex;
    font-size: 1em;
    color: var(--colorT2);
    gap: 0.5em;
  }

  & svg {
    display: block;
    width: 1em;
    height: 1em;
    fill: currentcolor;
  }

  & button {
    position: absolute;
    bottom: 1.1em;
    right: 1em;
    padding: 0;
    border: none;
    color: var(--colorT2);
    background-color: transparent;

    &:where(:focus, :hover, :active) {
      color: var(--color5);
      outline: none;
    }
  }
} .copy-offset + div {
  right: 2.5em;
} @keyframes anim-blink-empty {
  50% {
    content: '';
  }
} [class^='message'] {
  --color: currentcolor;
  --bg-color: var(--colorG27);
  padding: 0.15em 1em;
  color: var(--color);
  background-color: var(--bg-color);
  border-radius: var(--r2);
  box-shadow: var(--shadow1);
  /* @note Evite un conflit avec les margins et padding des éléments enfants. Mais pose des problèmes avec les pseudo-éléments. */
  /* overflow hidden */

  &[class*='highlight'] {
    --icon-size: 2.5em;
    display: grid;
    grid-template-columns: var(--icon-size) minmax(0, 1fr);
    gap: 1em;
    align-items: center;
    min-height: 5em;
    padding-inline: 1em;

    & > .icon {
      width: var(--icon-size);
      height: var(--icon-size);
      padding: 25%;
      fill: var(--bg-color);
      background-color: currentcolor;
      clip-path: circle(50%);
    }
  }
} .message-info {
  --bg-color: var(--color6);
} .message-success {
  --bg-color: var(--color4);
} .message-error {
  --bg-color: var(--color3);
} .message-warning {
  --bg-color: var(--colorS52);
} [role='region'][aria-labelledby][tabindex]:has([class^='table']) {
  overflow-x: auto;
  box-shadow: var(--shadow5);
  max-height: 80vh;
} [role='region'][aria-labelledby][tabindex]:focus-visible {
  outline: 0.1em solid var(--color5);
} [class^='table'] {
  width: 100%;
  border-collapse: collapse;
  font-weight: normal;
  word-break: normal;
  text-align: left;

  & th {
    font-weight: normal;
  }

  & th,
  & td {
    vertical-align: top;
    padding: 0.5em 1em;
    box-shadow: inset 0 0 1px var(--colorG13);
  }

  & thead th {
    position: sticky;
    top: 0;
    z-index: 1;
    background-color: var(--color2);
  }

  & tfoot,
  & tbody th {
    background-color: var(--colorG18);
  }

  & tbody tr:nth-child(odd) {
    background-color: var(--colorG27);
  }

  & tbody tr:nth-child(even) {
    background-color: var(--color1);
  }

  & tbody :empty::after {
    content: '/';
  }
} @container (35em > width) {
  [role='region'][aria-labelledby][tabindex]:has(.table-responsive) {
    all: unset;
  }

  .table-responsive {
    margin-block-start: -0.5em;
    border-collapse: separate;
    border-spacing: 0 0.5em;

    & thead,
    & tfoot {
      display: none;
    }

    & td {
      display: block;
    }

    & td:last-child {
      padding-block-end: 1em;
    }

    & td {
      box-shadow: none;
    }

    & tr > :first-child {
      padding-block-start: 1em;
    }

    & tfoot :empty {
      display: none;
    }

    & tbody tr {
      background-color: var(--colorG27) !important;
      box-shadow: var(--shadow5);

      & > * {
        padding: 0 1em;
      }
    }

    & tbody th::before,
    & tbody td::before {
      content: attr(data-thead) ' ';
      color: var(--colorT2);
    }

    & tbody :empty::after {
      content: '...';
    }
  }
} /* @import 'form'; */ /* @import 'input'; */ /* @import 'checkbox'; */ /* @import 'range'; */ /* @import 'button'; */ /* @import 'accordion'; */ /* @import 'tab'; */ /* @import 'scrollTop'; */ .footer {
  padding: 0 1em;
  color: var(--colorT2);
  background-color: var(--colorG15);
  /* @todo En test... */
  box-shadow: 0.5rem 0.5rem 1rem hsla(0, 0%, 0%, 0.15);

  & a {
    /* font-variant: small-caps; */
    color: var(--colorT);
    text-decoration: none;

    &:where(:focus, :hover, :active) {
      text-decoration: underline;
    }
  }

  & .wrap {
    display: flex;
    max-width: 92em;
    margin: 0 auto;

    @media (width < 35.01em) {
      flex-direction: column;
      align-items: center;
      text-align: center;
      line-height: 1;
      padding: 1em;
    }

    @media (width > 35.01em) {
      justify-content: space-between;
      align-items: center;
    }

    & > :first-child {
      display: flex;
      align-items: center;
    }
  }

  & .logo {
    margin-inline-end: 1em;

    &,
    & svg {
      width: 2em;
      height: 2em;
    }
  }

  & .wrap > :nth-child(2) {
    text-align: center;
  }
} .article {
  display: grid;
  grid-template-columns: minmax(0, 60em) minmax(0, 1fr);
  gap: var(--gap) 0;

  & > header {
    grid-column: span 2;
  }

  & h1 {
    /* @note Nombre magique qui compense le gap entre header et .wrapper @todo À revoir. */
    margin-block-end: 0.44em;
  }

  & > :where(.wrapper, article, form) {
    grid-column: 1;
    max-width: 55em;

    @media (width > 35.01em) {
      border-radius: var(--r1);
      box-shadow: var(--shadow3);
    }

    @media (35.01em < width < 50.01em) {
      padding: 2.5em 4em;
    }

    @media (width > 50.01em) {
      padding: 4em 6em;

      &:nth-child(odd) {
        /* @note Limitation à 2 rangées car impression visuelle d'un désordre à partir de 3 rangées. */
        margin-inline-start: auto;
      }
    }
  }

  & .sub-header,
  & article header {
    display: grid;
    grid-template-columns: 3.5em minmax(0, 1fr);
    grid-template-areas: 'aa tt' 'aa uu';
  }

  & article header {
    position: relative;
    margin-block-end: 1em;
    padding-block-end: 1em;
    border-bottom: 0.1em solid var(--colorG27);
  }

  & .sub-header {
    margin-block: 2em 1em;
  }

  & article {
    position: relative;
    
    @media (width < 35.01em) {
      padding-block: var(--gap);
    }
  }

  & form {
    width: 100%;
  }

  & .avatar {
    grid-area: aa;
    width: 3em;
    aspect-ratio: 1;
    background: var(--colorG13) var(--img, '');
    background-size: cover;
    border-radius: 50%;
  }

  & address {
    grid-area: tt;
    font-style: normal;
    font-weight: bold;
    font-variant: small-caps;

    & a {
      text-decoration: none;
    }
  }

  & time {
    grid-area: uu;
  }

  & .keywords {
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em 0.5em;
    margin-block: 0.75em 0;
    padding-inline-start: 0;
    font-size: 0.8em;

    & > :last-child {
      margin-inline-end: 0;
    }

    & li {
      margin-block-end: 0.75em;
    }

    & a {
      padding: 0.25em 0.5em 0.25em 1.25em;
      text-decoration: none;
      white-space: nowrap;
      background-color: var(--colorG15);
      clip-path: polygon(0.75em 0, 100% 0, 100% 100%, 0.75em 100%, 0 50%);
    }
  }

  & .anchor {
    /* @note Ancre placée sur les commentaires. */
    position: absolute;
    right: 0;
    bottom: 1em;
    color: var(--colorG38);
    text-decoration: none;

    &:where(:focus, :hover, :active) {
      color: var(--colorW);
    }
  }

  & > footer {
    grid-column: 1;
    display: flex;
    justify-content: flex-end;
    gap: var(--gap);
    max-width: 55em;

    @media (35.01em < width < 50.01em) {
      padding-inline: 4em;
    }

    @media (width > 50.01em) {
      padding-inline: 6em;
    }
  }

  @media (width < 35.01em) {
    & .wrapper {
      margin-block-start: calc(var(--gap)*-1);
    }
  }
} @media (width > 35.01em) {
  .boxx {
    padding: 4em 6em;
    border-radius: var(--r1);
    box-shadow: var(--shadow3);
  }
} /* @note Les propriétés applicables au sélecteur ::first-letter varient d'un navigateur à l'autre ; la solution retenue pour l'instant est un wrapper en javascript 'span.dropcap' sur la première lettre. */ .add-drop-cap > p:first-child::first-letter {
  /* @todo Fallback ":first-child::first-letter" pour Firefox, en attendant ":initial-letter" déjà disponible sous Chrome/Edge/Safari. @see https://caniuse.com/css-initial-letter */
  float: left;
  margin-inline-end: 0.2em;
  /* @todo Valeur spécifique à la font utilisée, à évaluer si changement de font. */
  padding: 0.28em 0.2em 0.12em;
  /* @affected Chrome. */
  line-height: 1;
  font-size: 3em;
  font-weight: bold;
  font-family: var(--font-list2);
  color: var(--color2);
  background-color: var(--colorA005);
  transform: translateY(0.05em);
  /* print-color-adjust: exact; */
  @supports (-moz-appearance:none) {
    margin-block-start: 0.05em;
    padding: 0.32em 0.2em 0.32em;
  }
} /* @import 'lineMark'; */ /* @import 'calendar'; */ /* @import 'progress'; */ /* @import 'loader'; */ pie-chart {
  --pie-chart-color-label: var(--color1);
  filter: drop-shadow(var(--shadow4));
} bar-chart {
  --bar-chart-color-label: var(--color1);
  filter: drop-shadow(var(--shadow4));
} /* @import 'scrollBar'; */ /* @bug @affected Chrome @note Effet de bord indésirables si utilisation avec la propriété column-count sur l'élément parent (sauf pour le premier item). 1/ Bandeau tronqué si placé sur un élément avec la propriété. 2/ Liens non cliquables si utilisation de clip-path.
 */ .ribbon-content {
  position: relative;
  /* @note Pas de hauteur minimum, celle-ci doit être gérée en fonction de la boite. */
  /* min-height: 7.5em */

  & > [class*='ribbon'] {
    --color: currentcolor;
    --bg-color: var(--colorG33);
    position: absolute;
    /* @note Au cas où le ribbon est placé après le contenu de .ribbon-hook. @todo Valeur importante pour passer par dessus les .map. */
    z-index: 2000;
    line-height: 2em;
    display: block;
    width: 10em;
    height: 2.5em;
    text-align: center;
    text-decoration: none;
    color: var(--color);
    user-select: none;

    &::before,
    &::after {
      content: '';
      position: absolute;
      inset: 0;
      clip-path: polygon(
        2em 0,
        8em 0,
        10em 2em,
        10em 2.5em,
        9.5em 2em,
        0.5em 2em,
        0 2.5em,
        0 2em
      );
    }

    &::before {
      top: 0.1em;
      height: 1.8em;
      border: 2px dotted var(--colorA2);
      border-inline: none;
    }

    &::after {
      z-index: -1;
      background-color: var(--bg-color);
      border-bottom: 0.5em solid var(--bg-color);
      transition: background-color 0.2s ease-in-out;
    }
  }

  & > [class*='ribbon-top'] {
    filter: drop-shadow(0 0.5em 0.5em var(--colorAB1));

    &::after {
      background-image: linear-gradient(
        to top,
        var(--colorAB3),
        var(--colorAB2) 1.25em
      );
    }
  }

  & > [class*='ribbon-bottom'] {
    filter: drop-shadow(0 -0.5rem 0.5rem var(--colorAB1));

    &::after {
      background-image: linear-gradient(
        to top,
        var(--colorAB2),
        var(--colorAB3) 1.25em
      );
    }
  }

  & > .ribbon-top-left {
    top: 0;
    left: 0;
    /* Alternative possible mais positionnement plus difficile à comprendre car tient compte de la direction imposée par rotate. */
    /* transform rotate(-45deg) translate(-2.65em, -.7em) */
    /* @note L'ordre des valeurs est importante. */
    transform: translate(-2.35em, 1.4em) rotate(-45deg);
  }

  & > .ribbon-top-right {
    top: 0;
    right: 0;
    transform: translate(2.35em, 1.4em) rotate(45deg);
  }

  & > .ribbon-bottom-left {
    bottom: 0;
    left: 0;
    transform: translate(-2.35em, -1.4em) rotate(225deg);
  }

  & > .ribbon-bottom-right {
    bottom: 0;
    right: 0;
    transform: translate(2.35em, -1.4em) rotate(135deg);
  }

  & > a[class*='ribbon'] {
    transition: color 0.2s ease-in-out;
  
    /*
    &::before {
      border-color: rgba(0, 0, 0, .3);
    }
    */
  
    &::after {
      background-color: var(--color2);
    }
  
    &:where(:focus, :hover, :active) {
      color: var(--colorG18);
  
      &::after {
        background-color: var(--color5);
      }
    }
  }
} /* @import 'forum'; */ /* @import 'skin'; */ /* @import 'demo'; */ /* @note Les helpers s'appliquent à la fin dans le but d'écraser des styles tels que font-size. */ .hidden,
[hidden] {
  display: none !important;
} @container grid (width < 35.01em) {
  .xs-hidden {
    display: none !important;
  }
} @container grid (35.01em < width < 50.01em) {
  .s-hidden {
    display: none !important;
  }
} @container grid (50.01em < width < 70.01em) {
  .m-hidden {
    display: none !important;
  }
} @container grid (70.01em < width < 92.01em) {
  .l-hidden {
    display: none !important;
  }
} .invisible {
  /* @note Cacher l'élément en laissant son emplacement @affected Lecteurs d'écran inclus. */
  visibility: hidden;
} a[aria-disabled='true'] {
  /* @todo En expérimentation. */
  cursor: default; /* not-allowed */

  &:active {
    pointer-events: none;
  }
} .sr-only {
  /* @note Caché visuellement mais disponible pour les lecteurs d'écran. */
  /* @see https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/style.css */
  position: absolute;
  /* @note Plus propre à l'inspection des éléments que `clip-path: inset(50%)` */
  transform: scale(0);
} /*
.sr-only {
  position: absolute;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  white-space: nowrap;
  border: 0;
  clip-path: rect(0, 0, 0, 0);
}
*/ /*
.relative {
  /* @note Classe habituellement ajoutée en js sur des éléments parents
  position: relative;
}
*/ .protected {
  user-select: none;
} .onaline {
  /* @note Texte sur une ligne sans dépassement. */
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
} .balance {
  text-wrap: balance;
} .center {
  display: grid;
  place-items: center;
  /* @note Alternative : */
  /*
  & > * {
    place-self: center;
  }
  */
} @container grid (width < 35.01em) {
  .xs-center {
    display: grid;
    place-items: center;
  }

  span.xs-br {
    /* @note un 'br' volontairement non sémantique à destination des petites définitions d'écran, à placer sur un span englobant un espace. */
    display: block;
  }
} .rotate90 {
    /* prettier-ignore */
    transform: rotate(90deg);
  } .rotate180 {
    /* prettier-ignore */
    transform: rotate(180deg);
  } .reverse {
  transform: scaleX(-1);
} .size {
  --size: 25em;
  --size-width: var(--size);
  --size-height: var(--size);
  width: var(--size-width);
  height: var(--size-height);
  max-width: 100%;
  max-height: 100vh;
} .vw80 {
  --size: 25em;
  --size-width: var(--size);
  width: calc(var(--size)*0.8);
} .scale {
  font-size: var(--scale, 100%);
} @container grid (width < 35.01em) {
  .xs-scale {
    font-size: var(--xs-scale, 100%);
  }
} @container grid (35.01em < width) {
  .s-scale {
    font-size: var(--s-scale, 100%);
  }
} @container grid (50.01em < width) {
  .m-scale {
    font-size: var(--m-scale, 100%);
  }
} @container grid (70.01em < width) {
  .l-scale {
    font-size: var(--l-scale, 100%);
  }
} .rescale {
  font-size: 1rem;
} /*
.no-overscroll {
  overscroll-behavior-x: none;
}
*/ .blink {
  animation: anim-blink 1.2s infinite;
} @keyframes anim-blink {
  50% {
    display: none;
    filter: invert(1);
  }
} @keyframes anim-fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
} @keyframes anim-fade-out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
} body > :not(main, footer),
form,
fieldset,
/* input, */
/* textarea, */
button,
audio,
video,
[class*=player],
/* .map, */
.accordion,
.card,
pre button,
pre div,
.line-mark {
  display: none !important;
} * {
  text-shadow: none !important;
} *,
::before,
::after {
  color: black !important;
} body,
.article {
  display: block; /* @affected Firefox */
} .footer {
  width: 100vw;
  box-shadow: none;
  & > * {
    flex-direction: column;
  }
} /* @note Harmonisation entre navigateurs. */ pre,
blockquote,
tr,
img,
figure,
[class*=figure] {
  break-inside: avoid;
} p,
h2,
h3 {
  orphans: 3;
  widows: 3;
} h2,
h3 {
  break-after: avoid;
} a,
h1 span {
  color: tomato !important;
} [class*=figure] {
  box-shadow: none !important;
  border: .1em solid #ddd; /* @affected Firefox @note Pas de prise en compte de la bordure si 1px. */
} [class*=-alignleft] {
  float: left;
  margin-inline-end: var(--gap);
} [class*=-alignright] {
  float: right;
  margin-inline-start: var(--gap);
} .article .wrapper {
  text-align: justify;
  margin-block-start: var(--gap);
  padding: 0 !important; /* @affected Firefox */
  box-shadow: none !important; /* @affected Firefox */
} .keywords a {
  background: #efefef !important;
} .avatar,
.avatars,
.keywords {
  print-color-adjust: exact !important;
}

/*# sourceMappingURL=print.css.map */