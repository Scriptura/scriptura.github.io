/* @note Utiliser .grid2 pour avoir deux colonnes, etc., au-delà de .grid4 utiliser .grid-auto (qui par défaut aura 5 colonnes max pour la largeur prévue de notre site). */
/* @note Avec `minmax` la grille ne sera pas tributaire de son contenu en responsive @see https://css-tricks.com/equal-width-columns-in-css-grid-are-kinda-weird/ */

:has(> [class^='grid']),
.parent-grid {
  /* @note ".parent-grid" est un fallback pour le sélecteur :has(), ajout de la classe via JS. */
  container: grid/inline-size;
  width: 100%; /* @note Important si le conteneur n'a pas de largeur définie par défaut. */
}

[class^='grid'] {
  display: grid;
  grid-auto-flow: dense;
  grid-template-columns: repeat(var(--n, 1), minmax(0, 1fr));

  &.row-defines {
    /* @note Permet aux spans de la propriété grid-row de se caler sur les lignes. Intéressant mais pas souhaitable d'emblée en production, d'où cette classe. */
    grid-auto-rows: minmax(0, 1fr);
  }

  &.gap {
    gap: var(--gap);
  }

  &.gap-block {
    /* @note padding et non margin, car ne doit pas pouvoir fusionner avec les marges de l'élément suivant. */
    padding-block: var(--gap);
  }

  &.gap-top {
    /* @note Idem. */
    padding-block-start: var(--gap);
  }

  &.gap-bottom {
    /* @note Idem. */
    padding-block-end: var(--gap);
  }

  &.gap-vertical {
    gap: 0 var(--gap);
  }
  /*
  &.masonry {
    grid-template-rows: masonry; /* @note Implémentation future en CSS @todo À surveiller.
  }
  */
}

.grid-auto,
.grid-auto-min {
  /* @note Ne pas définir la variable au-dessus de sa valeur par défaut afin d'éviter des dépassement sur les écrans de petites définitions. Préférer alors les grilles prédéfinies. @todo min() en test pour éviter justement ce problème. */
  grid-template-columns: repeat(auto-fit, minmax(min(var(--size-column, 20em), 100%), 1fr));
}

.grid-auto-min {
  /* @note Valeur réduite évitant de définir trop fréquement la variable de .grid-auto via du style en ligne. */
  --size-column: 10em;
}

@media (width < $sizeXS) {
  .xs-grid-auto {
    /* @todo Valeur arbitraire à redéfinir. */
    grid-template-columns: repeat(auto-fit, minmax(var(--xs-size-column, 11em), 1fr));
  }
}

@container grid ($sizeXS < width) {
  .grid2,
  .grid3,
  .grid4 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

@container grid ($sizeS < width) {
  .grid3,
  .grid4 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}

@container grid ($sizeM < width) {
  .grid4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}

@container grid ($sizeXS < width) {
  /* @todo En attendant avec impatience le support de "grid-column: span minmax(1, 2)" */
  .c2,
  .c3,
  .c4 {
    grid-column: span 2;
  }

  .xs-c1 {
    grid-column: span 1;
  }

  .xs-c2 {
    grid-column: span 2;
  }
}

@container grid ($sizeS < width) {
  .c3,
  .c4 {
    grid-column: span 3;
  }
}

@container grid ($sizeM < width) {
  .c4 {
    grid-column: span 4;
  }
}

@container grid ($sizeXS < width < $sizeS) {
  .s-c1 {
    grid-column: span 1;
  }

  .s-c2 {
    grid-column: span 2;
  }
}

@container grid ($sizeS < width < $sizeM) {
  .m-c1 {
    grid-column: span 1;
  }

  .m-c2 {
    grid-column: span 2;
  }
}

.r2 {
  grid-row: span 2;
}

.r3 {
  grid-row: span 3;
}

.r4 {
  grid-row: span 4;
}

@container grid ($sizeXS < width) {
  :root .xs-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

@container grid ($sizeXS < width < $sizeS) {
  :root .s-grid1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  :root .s-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

@container grid ($sizeS < width < $sizeM) {
  :root .m-grid1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  :root .m-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  :root .m-grid3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  :root .m-grid4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}

@container grid ($sizeM < width < $sizeL) {
  :root .l-grid1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  :root .l-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  :root .l-grid3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  :root .l-grid4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}

@container grid ($sizeL < width) {
  :root .xl-grid2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

.flex {
  display: flex;
  flex-wrap: wrap;
  align-items: center;

  &.gap {
    gap: var(--gap);
  }

  &.gap-top {
    margin-block-start: var(--gap);
  }

  &.gap-bottom {
    margin-block-end: var(--gap);
  }

  & .item-push {
    margin-inline-start: auto;
  }
}

.order {
  /* @note Valeur négative car l'utilisation de cette classe est souvent utilisée pour une monté des éléments frères plutôt qu'une descente. */
  order: var(--o, -1);
}

@container grid (width < $sizeXS) {
  .xs-order {
    order: var(--o, -1);
  }
}

@container grid ($sizeXS < width < $sizeS) {
  .s-order {
    order: var(--o, -1);
  }
}

@container grid ($sizeS < width < $sizeM) {
  .m-order {
    order: var(--o, -1);
  }
}

/* @note Mémento de nos (presques) équivalences grid/flex codées ultérieurement : */

/* with Grid layout: */
/*
.summary {
  display: grid;
  gap: var(--gap);

  @media (min-width: $sizeXS) {
    grid-template-columns: repeat(2, 1fr);
  }

  @media (min-width: $sizeS) {
    grid-template-columns: repeat(3, 1fr);
  }

  @media (min-width: $sizeL) {
    grid-template-columns: repeat(4, 1fr);
  }
}
*/
/* with flexbox: */
/*
.summary {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gap);

  & > * {
    flex: 1 0 100%; /* = [flex-grow flex-shrink flex-basis]

    @media (min-width: $sizeXS) {
      flex-basis: calc(50% - var(--gap));
    }

    @media (min-width: $sizeS) {
      flex-basis: calc(33% - var(--gap));
    }

    @media (min-width: $sizeL) {
      flex-basis: calc(25% - var(--gap));
    }
  }
}
*/
