/* @bug @affected Chrome @note Effet de bord indésirables si utilisation avec la propriété column-count sur l'élément parent (sauf pour le premier item). 1/ Bandeau tronqué si placé sur un élément avec la propriété. 2/ Liens non cliquables si utilisation de clip-path.
 */

.ribbon-content {
  position: relative;
  /* @note Pas de hauteur minimum, celle-ci doit être gérée en fonction de la boite. */
  /* min-height: 7.5em */

  & > [class*='ribbon'] {
    --color: currentcolor;
    --bg-color: var(--colorG33);
    position: absolute;
    /* @note Au cas où le ribbon est placé après le contenu de .ribbon-hook. @todo Valeur importante pour passer par dessus les .map. */
    z-index: 2000;
    line-height: 2em;
    display: block;
    width: 10em;
    height: 2.5em;
    text-align: center;
    text-decoration: none;
    color: var(--color);
    user-select: none;

    &::before,
    &::after {
      content: '';
      position: absolute;
      inset: 0;
      clip-path: polygon(
        2em 0,
        8em 0,
        10em 2em,
        10em 2.5em,
        9.5em 2em,
        0.5em 2em,
        0 2.5em,
        0 2em
      );
    }

    &::before {
      top: 0.1em;
      height: 1.8em;
      border: 2px dotted var(--colorA2);
      border-inline: none;
    }

    &::after {
      z-index: -1;
      background-color: var(--bg-color);
      border-bottom: 0.5em solid var(--bg-color);
      transition: background-color 0.2s ease-in-out;
    }
  }

  & > [class*='ribbon-top'] {
    filter: drop-shadow(0 0.5em 0.5em var(--colorAB1));

    &::after {
      background-image: linear-gradient(
        to top,
        var(--colorAB3),
        var(--colorAB2) 1.25em
      );
    }
  }

  & > [class*='ribbon-bottom'] {
    filter: drop-shadow(0 -0.5rem 0.5rem var(--colorAB1));

    &::after {
      background-image: linear-gradient(
        to top,
        var(--colorAB2),
        var(--colorAB3) 1.25em
      );
    }
  }

  & > .ribbon-top-left {
    top: 0;
    left: 0;
    /* Alternative possible mais positionnement plus difficile à comprendre car tient compte de la direction imposée par rotate. */
    /* transform rotate(-45deg) translate(-2.65em, -.7em) */
    /* @note L'ordre des valeurs est importante. */
    transform: translate(-2.35em, 1.4em) rotate(-45deg);
  }

  & > .ribbon-top-right {
    top: 0;
    right: 0;
    transform: translate(2.35em, 1.4em) rotate(45deg);
  }

  & > .ribbon-bottom-left {
    bottom: 0;
    left: 0;
    transform: translate(-2.35em, -1.4em) rotate(225deg);
  }

  & > .ribbon-bottom-right {
    bottom: 0;
    right: 0;
    transform: translate(2.35em, -1.4em) rotate(135deg);
  }

  & > a[class*='ribbon'] {
    transition: color 0.2s ease-in-out;
  
    /*
    &::before {
      border-color: rgba(0, 0, 0, .3);
    }
    */
  
    &::after {
      background-color: var(--color2);
    }
  
    &:where(:focus, :hover, :active) {
      color: var(--colorG18);
  
      &::after {
        background-color: var(--color5);
      }
    }
  }
}
