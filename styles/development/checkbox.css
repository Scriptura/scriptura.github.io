:where(input[type='checkbox'], input[type='radio']):not([role='switch']) {
  appearance: none;
  display: inline-grid;
  width: 1.2em;
  height: 1.2em;
  vertical-align: text-top;
  box-sizing: border-box;
  background-color: var(--colorG15);
  border: 0.15em solid var(--color1);
  outline: none;
  box-shadow: inset 0 0.1em 0.3em var(--colorAB3);
  cursor: pointer;

  &:disabled {
    background: var(--colorG18)
      repeating-linear-gradient(
        -45deg,
        transparent 0 2px,
        var(--colorG33) 2px 4px
      );
    cursor: default;

    & + label {
      cursor: default;
    }
  }

  &::before {
    content: '';
    display: block;
    background-color: var(--color2);
    transform: scale(0);
  }

  &:focus-visible {
    border-color: var(--color5) !important;
  }
}

input[type='checkbox']:not([role='switch'])::before {
  clip-path: polygon(12% 41%, 4% 50%, 38% 84%, 95% 26%, 87% 17%, 37% 67%);
  transition: transform 0.2s;
}

input[type='checkbox']:not([role='switch']):checked::before {
  transform: scale(1.5);
}

input[type='radio']:not([role='switch']) {
  border-radius: 50%;

  &::before {
    clip-path: circle(30% at 50% 50%);
    transition: transform 0.3s;
  }

  &:checked {
    border-color: var(--color2);
  }
}

input[type='radio']:not([role='switch']):checked::before {
  transform: scale(1);
}

:where(input[type='checkbox'], input[type='radio'])[role='switch'] {
  all: unset;
  vertical-align: middle;
  box-sizing: border-box;
  width: 5em;
  height: 2.5em;
  background-color: var(--colorG15);
  border: 0.3em solid transparent;
  border-radius: 1.25em;
  box-shadow: inset 0 0.2em 0.5em var(--colorAB2);
  cursor: pointer;

  &::before {
    content: attr(data-a);
    display: block;
    width: 2.5em;
    height: 2.5em;
    text-align: center;
    line-height: 2.5em;
    color: var(--colorT);
    background-color: var(--color6);
    border-radius: 1.25em;
    box-shadow: 0 0.2em 0.5em var(--colorAB3);
    transform: translate(-0.3em, -0.3em);
    transition: transform 0.2s ease-in-out;
  }

  &:checked::before {
    content: attr(data-b);
    background-color: var(--color2);
    transform: translate(2.2em, -0.3em);
  }

  &:disabled {
    background-image: repeating-linear-gradient(
      -45deg,
      var(--colorA1) 0 3px,
      var(--colorG18) 0,
      transparent 0,
      transparent 6px
    );
    cursor: default;

    &::before {
      color: var(--colorG38);
      background-color: var(--color1);
    }

    & + label {
      cursor: default;
    }
  }

  &:not(:checked) + label {
    color: var(--colorG45);
  }

  &:focus-visible {
    border-color: var(--color5) !important;
  }
}

.switch-custom {
  position: relative;
  width: 5em;
  height: 2.5em;

  & [role='switch'] {
    position: absolute;
    inset: 0;

    &::before {
      display: none;
    }

    & + div {
      position: absolute;
      left: 0;
      width: 2.5em;
      height: 2.5em;
      text-align: center;
      line-height: 2.5em;
      color: var(--colorT);
      background-color: var(--color6);
      border-radius: 1.25em;
      box-shadow: 0 0.2em 0.5em var(--colorAB3);
      transition: transform 0.2s ease-in-out;
      pointer-events: none;
    }

    &:checked + div {
      background-color: var(--color2);
      transform: translate(2.5em, 0);
    }

    &:disabled + div {
      color: var(--colorG38);
      background-color: var(--color1);
    }

    &:not(:disabled).dual-state + div {
      background-color: var(--color2);
    }
  }

  & :not(:checked) + div svg:nth-child(1) {
    display: none;
  }

  & :checked + div {
    transform: translateX(1.25em);

    & svg:nth-child(2) {
      display: none;
    }
  }

  &:has([role='switch']:not(:checked, .dual-state)) + label {
    color: var(--colorG45);
  }

  &:has(:disabled) + label {
    cursor: default;
  }
}
