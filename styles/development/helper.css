.hidden,
[hidden] {
  display: none !important;
}

@container grid (width < $sizeXS) {
  .xs-hidden {
    display: none !important;
  }
}

@container grid ($sizeXS < width < $sizeS) {
  .s-hidden {
    display: none !important;
  }
}

@container grid ($sizeS < width < $sizeM) {
  .m-hidden {
    display: none !important;
  }
}

@container grid ($sizeM < width < $sizeL) {
  .l-hidden {
    display: none !important;
  }
}

.invisible {
  /* @note Cacher l'élément en laissant son emplacement @affected Lecteurs d'écran inclus. */
  visibility: hidden;
}

a[aria-disabled='true'] {
  /* @todo En expérimentation. */
  cursor: not-allowed;

  &:active {
    pointer-events: none;
  }
}

.sr-only {
  /* @note Caché visuellement mais disponible pour les lecteurs d'écran. */
  /* @see https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/style.css */
  position: absolute;
  /* @note Plus propre à l'inspection des éléments que `clip-path: inset(50%)` */
  transform: scale(0);
}

/*
.sr-only {
  position: absolute;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  white-space: nowrap;
  border: 0;
  clip-path: rect(0, 0, 0, 0);
}
*/

/*
.relative {
  /* @note Classe habituellement ajoutée en js sur des éléments parents
  position: relative;
}
*/

.protected {
  user-select: none;
}

.onaline {
  /* @note Texte sur une ligne sans dépassement. */
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.balance {
  text-wrap: balance;
}

.center {
  display: grid;
  place-items: center;
  /* @note Alternative : */
  /*
  & > * {
    place-self: center;
  }
  */
}

@container grid (35em > width) {
  span.xs-br {
    /* @note un 'br' volontairement non sémantique à destination des petites définitions d'écran, à placer sur un span englobant un espace. */
    display: block;
  }
}

@container grid (35em > width) {
  .xs-center {
    display: grid;
    place-items: center;
  }
}

@for $i from 90 to 180 by 90 {
  .rotate$(i) {
    transform: rotate($(i) deg);
  }
}

.reverse {
  transform: scaleX(-1);
}

.size {
  --size: 25em;
  --size-width: var(--size);
  --size-height: var(--size);
  width: var(--size-width);
  height: var(--size-height);
  max-width: 100%;
  max-height: 100vh;
}

.vw80 {
  --size: 25em;
  --size-width: var(--size);
  width: calc(var(--size) * 0.8);
}

@each $scale in 300, 250, 200, 175, 160, 150, 140, 130, 120, 115, 110, 105, 95, 90, 85, 80, 75, 70, 60, 50, 40, 30 {
  .scale$(scale) {
    font-size: $(scale) %;
  }
}

.rescale {
  font-size: 1rem;
}

@container grid (35em > width) {
  .xs-scale {
    font-size: var(--xs-scale, 80%);
  }
}

.blink {
  animation: anim-blink 1.2s infinite;
}

@keyframes anim-blink {
  50% {
    display: none;
    filter: invert(1);
  }
}

/*
.no-overscroll {
  overscroll-behavior-x: none;
}
*/
