@use 'variable' as *;

ul,
ol {
  padding-inline-start: var(--list-start, 2.5em);
}

ul :where(ul, ol :where(ul, ul ol), ol ol) {
  padding-inline-start: 2.5em;
}

ul {
  list-style-type: square;
}

ol ol {
  list-style-type: lower-latin;
}

ol ol ol {
  list-style-type: lower-greek;
}

.list-gap {
  display: grid;
  gap: 0.75em;
}

.list-stripe,
.list-stripe-links {
  margin: 0;
  padding-inline-start: 0;

  & li {
    display: block;
    border-radius: var(--r2);
  }

  & > * {
    padding: 0.5em 1em;
    background-color: var(--colorG27);
    box-shadow: var(--shadow6);
  }
}

.list-stripe-links {
  & a {
    display: block;
    color: var(--colorT);
    text-decoration: none;
  }

  & li:focus-within,
  & li:hover {
    background-color: var(--color2);
    outline: none;
    animation: anim-list 0.05s ease-in-out;
  }
}

.list-straight,
.list-rounded {
  margin: 0;
  padding-inline-start: 0;

  & li {
    display: grid;
    grid-template-columns: 3em minmax(0, 1fr);

    &:focus-within,
    &:hover {
      animation: anim-list 0.05s ease-in-out;
    }

    &:where(:focus-within, :hover, :active) svg,
    &:focus-within::before,
    &:hover::before,
    &:active::before {
      color: var(--colorW);
      background-color: var(--color5);
    }
  }

  & li::before,
  & svg,
  & a {
    box-shadow: var(--shadow6);
    transition: color, background-color 0.3s ease-in-out;
  }

  & a {
    display: flex;
    align-items: center;
    width: 100%;
    min-height: 2.5em;
    padding: 0.5em 1em;
    background-color: var(--colorG27);
    text-decoration: none;

    &:where(:focus, :hover, :active) {
      //color: var(--colorW);
      background-color: var(--color2);
      //text-decoration: none;
    }
  }

  & li::before,
  & svg {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--colorT);
    background-color: var(--color2);
  }
}

.list-straight {
  & li {
    box-shadow: var(--shadow6);
  }
  & li::before,
  & svg {
    width: 3em;
    border-radius: var(--r2) 0 0 var(--r2);
    clip-path: polygon(
      0% 0%,
      calc(100% - 1em) 0,
      100% 50%,
      calc(100% - 1em) 100%,
      0% 100%
    );
  }

  & li::before {
    padding-inline-end: 0.7em;
  }

  & svg {
    min-height: 100%;
    padding-inline: 0.7em 1.1em;
  }

  & a {
    position: relative;
    right: 0.5em;
    width: calc(100% + 0.5em);
    padding-inline-start: 1.5em;
    border-radius: 0 var(--r2) var(--r2) 0;
    clip-path: polygon(100% 0, 100% 100%, 0% 100%, 1em 50%, 0% 0%);
  }
}

.list-rounded {
  & li:focus-within svg,
  & li:hover svg,
  & li:focus-within::before,
  & li:hover::before {
    transform: rotate(360deg);
  }

  & li::before,
  & svg {
    width: 2.5em;
    height: 2.5em;
    margin: auto 0;
    transition: transform 0.3s ease-in-out;
  }

  & li::before {
    border-radius: 50%;
  }

  & svg {
    position: relative;
    padding-inline: 0.7em;
    clip-path: circle(50%);
  }

  & a {
    border-radius: 1.25em;
  }
}

ol:where(.list-straight, .list-rounded) li {
  counter-increment: li;

  &::before {
    content: counter(li);
  }
}

[class^='grid'][class*='list-'] {
  gap: var(--gap);
}

[start] > .chorus {
  list-style-type: 'R. ';
}

@keyframes anim-list {
  50% {
    transform: scale(1.03) translateZ(0);
  }
}
